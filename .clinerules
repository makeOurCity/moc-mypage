# 主な開発の流れ

1. ユーザーが私に要件を伝えるので、私は「Issue作成のルール」を参考に用件をまとめながら githubにissueを作成します。
2. 私はissue上で不明点や不明瞭な部分をissue上でユーザーに質問してより要件を詳細にします。
3. issue上で 2 のやりとりを実装が行えるようになる亜mで行います。
4. ユーザーへ実装開始の確認を取り実装します。
5. 私が実装に入ります。
6. 実装を終えたらテストをと動作確認を私が行います。
7. テストと動作確認を終えたらコミットします。
8. ユーザーに報告します。その後はユーザーの指示に従いますが、要望が他にないか確認するようにします。

# コード変更に関する重要なルール

## 1. コミットの実践
- タスクが完了してユーザーに報告する準備ができたら、ソースコードの変更をコミットします。
- 作業を開始する前に、`git status`を使用して変更の状態を確認します。
- 大規模な変更を行う場合は、事前にユーザーに相談します。

## 2. テスト要件
- 変更をコミットする前に、すべてのテストを実行し、パスする必要があります。
- システム全体の安定性を確保するため、完全なテストスイートを実行します。

## 3. エラー処理
- テストが連続して3回以上失敗した場合は、作業を中止してユーザーに相談します。
- 継続的なテスト失敗が発生した場合は、対処方法についてユーザーのガイダンスを求めます。

# テスト実行プロセス

以下のコマンドを使用してテストを実行します：
```
npm run test:ai
```

テストプロセスは以下の手順で行います：
1. まず、実装したコンポーネントに焦点を当てたテストを実行します。
2. これらのターゲットテストがパスしたら、包括的な検証のために完全なテストスイートの実行に進みます。

# Issue作成のルール

私はユーザーに質問する際に以下の形式に従います。


- 必須
  - 質問文だけでなく質問の意図を明確にする。
  - 選択肢を用意する。用意できない場合はその理由を説明する。
  - ユーザーの返信用テンプレートを用意する。
- 推奨
  - 参考URLをつける


# GitHub操作のルール

## セットアップと認証
1. ghコマンドが未インストールの場合は、インストールを依頼します。
2. 認証が必要な場合は、以下のコマンドでブラウザ認証を実行します：
```
gh auth login
```

## Pull Request管理
- PR作成後は5分間隔でGitHub Actionsの実行状況を確認します。
- テスト失敗時は即座に原因を調査し、必要な修正を行います。

## 禁止操作
- 管理外リポジトリへの操作
- Issue、Pull Requestの削除

# コミット規約

## メッセージ形式
```
[タイプ] 要約（50文字以内）

変更内容の詳細説明（全体で300文字以内）
- 変更理由
- 影響範囲
- 関連ファイル
```

## コミットタイプ
- [新規追加] 新機能の追加
- [修正] バグ修正や機能改善
- [削除] 機能やファイルの削除
- [リファクタリング] コードの整理
- [その他] その他の変更

## 記述ルール
- メッセージは全て英語で記述します。
- 要約は現在形で記述します（例：Add feature、Fix bug）。
- 要約は50文字以内、詳細を含む全体は300文字以内とします。
- 関連するIssue番号がある場合は必ず記載します。
