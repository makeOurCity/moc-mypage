# コード変更に関する重要なルール

## 1. コミットの実践
- タスクが完了してユーザーに報告する準備ができたら、ソースコードの変更をコミットします。
- 作業を開始する前に、`git status`を使用して変更の状態を確認します。
- 大規模な変更を行う場合は、事前にユーザーに相談します。

## 2. テスト要件
- 変更をコミットする前に、すべてのテストを実行し、パスする必要があります。
- システム全体の安定性を確保するため、完全なテストスイートを実行します。

## 3. エラー処理
- テストが連続して3回以上失敗した場合は、作業を中止してユーザーに相談します。
- 継続的なテスト失敗が発生した場合は、対処方法についてユーザーのガイダンスを求めます。

# テスト実行プロセス

以下のコマンドを使用してテストを実行します：
```
npm run test:ai
```

テストプロセスは以下の手順で行います：
1. まず、実装したコンポーネントに焦点を当てたテストを実行します。
2. これらのターゲットテストがパスしたら、包括的な検証のために完全なテストスイートの実行に進みます。

# GitHub操作のルール

## セットアップと認証
1. ghコマンドが未インストールの場合は、インストールを依頼します。
2. 認証が必要な場合は、以下のコマンドでブラウザ認証を実行します：
```
gh auth login
```

## Pull Request管理
- PR作成後は5分間隔でGitHub Actionsの実行状況を確認します。
- テスト失敗時は即座に原因を調査し、必要な修正を行います。

## 禁止操作
- 管理外リポジトリへの操作
- Issue、Pull Requestの削除

## Issue作成の補助

- 私は新機能を追加する際にIssueをまず作成してから作業を開始します。
  - Issueは日本語で記述します。
  - Issueはできるだけ１つにまとめます。
- Issueの作成時にはユーザーからの要望を聞き、その内容を反映するようにします。
  - 要望に矛盾や不明瞭な点がある場合は、ユーザーに確認を求めます。
- ユーザーに確認する際は必ず以下のいずれかで確認を行います。
  - 選択肢を用意する。
  - 質問の意図を明確に記述する。
- 確認のコメントにはユーザーが答えやすいようにテンプレートを用意します。
- やりとりはGitHub Issue上で行います。主にユーザーへの質問もissueにコメントし、その返信もissue上で行います。
- Issueの内容が確定したら作業を開始します。
- Issueの作成に失敗したら、エラー内容を確認して再度作成を試みますが、連続で２回失敗したらユーザーに相談します。
- 私がコメント、またはIssue作成時には私がRooであることを明確にします。

## 禁止操作
- 関連しないリポジトリ。つまりmakeOurCity/moc-mypage以外へのissueコメントや作成。

# コミット規約

## メッセージ形式
```
[タイプ] 要約（50文字以内）

変更内容の詳細説明（全体で300文字以内）
- 変更理由
- 影響範囲
- 関連ファイル
```

## コミットタイプ
- [新規追加] 新機能の追加
- [修正] バグ修正や機能改善
- [削除] 機能やファイルの削除
- [リファクタリング] コードの整理
- [その他] その他の変更

## 記述ルール
- メッセージは全て英語で記述します。
- 要約は現在形で記述します（例：Add feature、Fix bug）。
- 要約は50文字以内、詳細を含む全体は300文字以内とします。
- 関連するIssue番号がある場合は必ず記載します。
